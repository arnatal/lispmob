/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.5
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "lispd"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "lispd"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.3.2"
#endif

enum enum_debug { debug__NULL = -1, debug_arg_0 = 0, debug_arg_1, debug_arg_2, debug_arg_3 };
enum enum_afi { afi__NULL = -1, afi_arg_4 = 0, afi_arg_6 };

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  enum enum_debug debug_arg;	/**< @brief Debuging output [0..3].  */
  char * debug_orig;	/**< @brief Debuging output [0..3] original value given at command line.  */
  const char *debug_help; /**< @brief Debuging output [0..3] help description.  */
  enum enum_afi afi_arg;	/**< @brief Default RLOCs afi [4,6].  */
  char * afi_orig;	/**< @brief Default RLOCs afi [4,6] original value given at command line.  */
  const char *afi_help; /**< @brief Default RLOCs afi [4,6] help description.  */
  const char *daemonize_help; /**< @brief Daemonize lispd help description.  */
  char * config_file_arg;	/**< @brief Alternate config file.  */
  char * config_file_orig;	/**< @brief Alternate config file original value given at command line.  */
  const char *config_file_help; /**< @brief Alternate config file help description.  */
  char * map_server_arg;	/**< @brief MapServer.  */
  char * map_server_orig;	/**< @brief MapServer original value given at command line.  */
  const char *map_server_help; /**< @brief MapServer help description.  */
  char * src_addr_arg;	/**< @brief Src Addr.  */
  char * src_addr_orig;	/**< @brief Src Addr original value given at command line.  */
  const char *src_addr_help; /**< @brief Src Addr help description.  */
  char * dst_addr_arg;	/**< @brief Dst Addr.  */
  char * dst_addr_orig;	/**< @brief Dst Addr original value given at command line.  */
  const char *dst_addr_help; /**< @brief Dst Addr help description.  */
  int src_port_arg;	/**< @brief Src Port.  */
  char * src_port_orig;	/**< @brief Src Port original value given at command line.  */
  const char *src_port_help; /**< @brief Src Port help description.  */
  int dst_port_arg;	/**< @brief Dst Port.  */
  char * dst_port_orig;	/**< @brief Dst Port original value given at command line.  */
  const char *dst_port_help; /**< @brief Dst Port help description.  */
  int protocol_arg;	/**< @brief Protocol.  */
  char * protocol_orig;	/**< @brief Protocol original value given at command line.  */
  const char *protocol_help; /**< @brief Protocol help description.  */
  char * rloc_arg;	/**< @brief RLOC.  */
  char * rloc_orig;	/**< @brief RLOC original value given at command line.  */
  const char *rloc_help; /**< @brief RLOC help description.  */
  int priority_arg;	/**< @brief Priority.  */
  char * priority_orig;	/**< @brief Priority original value given at command line.  */
  const char *priority_help; /**< @brief Priority help description.  */
  int weight_arg;	/**< @brief Weight.  */
  char * weight_orig;	/**< @brief Weight original value given at command line.  */
  const char *weight_help; /**< @brief Weight help description.  */
  int action_arg;	/**< @brief Action.  */
  char * action_orig;	/**< @brief Action original value given at command line.  */
  const char *action_help; /**< @brief Action help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int debug_given ;	/**< @brief Whether debug was given.  */
  unsigned int afi_given ;	/**< @brief Whether afi was given.  */
  unsigned int daemonize_given ;	/**< @brief Whether daemonize was given.  */
  unsigned int config_file_given ;	/**< @brief Whether config-file was given.  */
  unsigned int map_server_given ;	/**< @brief Whether map-server was given.  */
  unsigned int src_addr_given ;	/**< @brief Whether src-addr was given.  */
  unsigned int dst_addr_given ;	/**< @brief Whether dst-addr was given.  */
  unsigned int src_port_given ;	/**< @brief Whether src-port was given.  */
  unsigned int dst_port_given ;	/**< @brief Whether dst-port was given.  */
  unsigned int protocol_given ;	/**< @brief Whether protocol was given.  */
  unsigned int rloc_given ;	/**< @brief Whether rloc was given.  */
  unsigned int priority_given ;	/**< @brief Whether priority was given.  */
  unsigned int weight_given ;	/**< @brief Whether weight was given.  */
  unsigned int action_given ;	/**< @brief Whether action was given.  */

  int lispdconfig_mode_counter; /**< @brief Counter for mode lispdconfig */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_debug_values[];  /**< @brief Possible values for debug. */
extern const char *cmdline_parser_afi_values[];  /**< @brief Possible values for afi. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
